const AWS = require('aws-sdk')

exports.handler = (event, context, callback) => {
  const slackInput = event.body.split('&').find((section) => section.startsWith('text='))
  const decodePass = decodeURIComponent(slackInput.split('=')[1]).replace(/\+/g, ' ')
  const response = {
    statusCode: 200,
    body: decodePass
  }

  const policyInput = `{
    "systemCode": "monkeycode",
    "policyDescription": "Generated by AWS Policy Generator",
    "performTestRun": "true",
    "requireS3": {
      "artefacts": true,
      "application": false
    },
    "requireLambda": true,
    "requireApiGateway": true,
    "requireDynamo": false,
    "requireKinesis": false,
    "requireCloudformation": {
      "changeRequestSetName": "Serverless-2016-10-31",
      "required": true,
      "changeRequestRequired": true
    }
  }`

  getFromLambda('konPolicyGen_KonstructorPolicyGenerator', policyInput, (err, data) => {
    const policyRes = (err) ? { value: err.message } : JSON.parse(data.Payload)
    console.log(policyRes)
    const encryptInput = (new Buffer(JSON.stringify(policyRes)).toString('base64'))
    getFromLambda('konencryptapi_LambdaKeyService', `{}`, (err, data) => {
      const keyRes = (err) ? { value: err.message } : JSON.parse(data.Payload)
      getFromLambda('konencryptapi_LambdaEncryptService',
                    `{"key":"${keyRes.id}",
                    "type":"ENCRYPT",
                    "value":"${encryptInput}"}`, (err, data) => {
                      console.log('FHBFGFHBFSFGHSRTDFDFHT')
                      const encryptRes = (err) ? { value: err.message } : JSON.parse(data.Payload)
                      console.log('kkjdguhfiuhrduhdfgkjbsr', encryptRes)
                      callback(null, response)
                    })
    })
  })

  function getFromLambda (functionName, payloadData, callback) {
    const credentials = new AWS.SharedIniFileCredentials({ profile: 'maraskey-d' })
    AWS.config.credentials = credentials
    const lambda = new AWS.Lambda({
      region: 'eu-west-1'
    })
    const params = {
      FunctionName: functionName,
      Payload: payloadData
    }

    lambda.invoke(params, callback)
  }
}
